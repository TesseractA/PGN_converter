#!/usr/bin/env python3
#print("2nd line of code!")

import sys
import re

def main():
    # print("arguements %s " % sys.argv)
    # set to false to only have book moves.
    keep_eval_depth_time = True 
    # set to true for keeping book moves.
    keep_book_moves = True 
    # keeps result e.g. keeps "White mates}" or other result within brackets
    keep_bracketed_result = True
    file_name_list = [] # not sure what this is for
    file_lines = str(sys.argv) #not sure what i put this here for either
    for x in range(1,len(sys.argv)): #sys.argv[0] is the script name
        PGN_path = sys.argv[x] # should be a single commandline argument/object
        new_pathname =  file_rename(str(sys.argv[x]))
        print("Gonna read out this: " + PGN_path + "Gonna print out to that: " + new_pathname)
        if PGN_path != 'PGN_simplifier.py' or 'PGN_to_scoreboard.py':
            file_name_list.append(PGN_path) # not sure what this is doing but ok
            file_string = I_READ(PGN_path) # it is good to read
            print("Read file!")
        i = 0
        bracket_true = 0 
        print("I'm here!")
        # when 0, it is outside of brackets. when 1, it is inside of brackets. 
        # when 2, it is inside of brackets, and the first comma.
        new_file_string = "" # what the new file will have
        if keep_eval_depth_time:
            while i < len(file_string):
                if bracket_true == 0 and file_string[i:i+6] == "{book}": #keeps book moves
                    if keep_book_moves == True:    
                        new_file_string += file_string[i:i+6]
                    i += 7
                elif bracket_true == 0 and file_string[i] == "{": 
                    bracket_true = 1
                elif bracket_true == 1 and file_string[i] == ",":
                    bracket_true = 2
                elif bracket_true > 0 and file_string[i] == "}":
                    bracket_true = 1
                # this upcoming elif is kinda hacky.
                elif bracket_true > 0:
                    if keep_bracketed_result == True and (file_string[i:i+12] == "White mates}" or file_string[i:i+12] == "Black mates}" or file_string[i:i+31] == "Draw by adjudication: SyzygyTB}" or file_string[i:i+25] == "Draw by fifty moves rule}" or file_string[i:i+21] == "Draw by adjudication}" or file_string[i:i+26] == "Draw by 3-fold repetition}" or file_string[i:i+18] == "Draw by stalemate}"):
                        new_file_string += ", " + file_string[i:i+40]
                        i += 40
                        bracket_true = 0
                try:
                    if bracket_true < 2: #differently constructed in the other loop
                        new_file_string += file_string[i]
                except:
                    break
                if (i % 100000) == 0:
                    print(i)
                i += 1
        else: #excluding evaluations
            while i < len(file_string):
                if bracket_true == 0 and file_string[i:i+6] == "{book}": #removable if it breaks stuff i think
                    if keep_book_moves == True:    
                        new_file_string += file_string[i:i+6]
                    i += 7
                elif bracket_true == 1 and file_string[i] == "{":
                    bracket_true = 1
                elif bracket_true > 0 and file_string[i] == "}":
                    bracket_true = 0
                    i += 1 #making sure to avoid reading the open parenthesis cuz we don't want anything other than "book" comments, maybe.
                #hacky elif
                elif bracket_true > 0:
                    if keep_bracketed_result == True and (file_string[i:i+12] == "White mates}" or file_string[i:i+12] == "Black mates}" or file_string[i:i+31] == "Draw by adjudication: SyzygyTB}" or file_string[i:i+25] == "Draw by fifty moves rule}" or file_string[i:i+21] == "Draw by adjudication}" or file_string[i:i+26] == "Draw by 3-fold repetition}" or file_string[i:i+18] == "Draw by stalemate}"):
                        new_file_string += ", " + file_string[i:i+40]
                        i += 40
                        bracket_true = 0
                try:
                    if bracket_true == 0: #differently constructed in the other loop
                        new_file_string += file_string[i]
                except:
                    break
                if (i % 100000) == 0:
                    print(i)
                i += 1
        I_WRITE(new_pathname, new_file_string) # the new PGN string is going into the file.
            
# def withinQuotes(index, file_string): # tries to find whatever is within a set of quotes
#    internal_i = i
#    while True:
#        if internal_i == file_string.length():
#            break
#        if file_string_i == "\"" or file_string == "\'":
#            while True:
#                
#        else:
#            break
            
def is_digit(string): # returns a boolean whether the string is a digit or not
    if string == '1' or string == '2' or string == '3' or string == '4' or string == '5' or string == '6' or string == '7' or string == '8' or string == '9' or string == '0':
        return True
    else:
        return False

def file_rename(a_pathname): #renames the pathname to have the filename include a "-clean" tag.
    add_string = "-nicer"
    new_pathname_string = ""
    i = 0
    #print("making_file_rename")
    while (i < len(a_pathname)):
        if (a_pathname[i] == "/" or a_pathname == "\\") and i != len(a_pathname):
            new_pathname_string = ""
        elif a_pathname[i] == ".":
            new_pathname_string += add_string + "."
        else:
            new_pathname_string += a_pathname[i]
        i += 1
    return new_pathname_string

# Reads Game Files
def I_READ(a_pathname):
    filename = open(a_pathname, "r")
    longest_string_in_python = filename.read()
    return longest_string_in_python

# takes in a name a_filename, and writes the writetext string in that file
def I_WRITE(a_pathname, writetext): 
    print("I'm about to write this to a file named: " + a_pathname)
    filename = open(a_pathname, "w+")
    filename.write(writetext)

if __name__ == '__main__':
    main()
